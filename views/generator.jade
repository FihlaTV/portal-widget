extends layout

block content

  script.

    var myScope;
    var app = angular.module('voxboneApp', ['ngCookies'])
      .controller('WidgetController', ['$scope', '$http', '$window', '$cookies', function($scope, $http, $window, $cookies){
          myScope = $scope;
          function getCookieWithDefault(key, default_value) {
                    if(typeof($cookies.get(key)) == 'undefined') {
                        return default_value;
                  } else {
                        return $cookies.get(key);
                }
          }
                  

          myScope.callerId = getCookieWithDefault("callerId", "click2vox");
          myScope.buttonText = getCookieWithDefault("buttonText", "Call Sales");
          myScope.context = getCookieWithDefault("context", "");
          myScope.button_style = getCookieWithDefault("button_style","style-b");
          myScope.dial_pad = $.parseJSON(getCookieWithDefault("dial_pad",true));
          myScope.send_digits = getCookieWithDefault("send_digits","");
          myScope.incompatible_browser_configuration=getCookieWithDefault("incompatible_browser_configuration",'hide_widget');
          myScope.link_button_to_a_page_value = getCookieWithDefault("link_button_to_a_page_value",'');
          myScope.show_text_html_value = getCookieWithDefault("show_text_html_value","");
          myScope.auth_uri = getCookieWithDefault("auth_uri","");

          // not saved on reload
          myScope.preview_webrtc_compatible = true;
          myScope.auth_uri_valid = false;
          myScope.showWidgetCode = false;


          $scope.saveConfig = function() {
                  $cookies.put("callerId", myScope.callerId);
                  $cookies.put("buttonText", myScope.buttonText);
                  $cookies.put("context", myScope.context);
                  $cookies.put("button_style", myScope.button_style);
                  $cookies.put("dial_pad", myScope.dial_pad);
                  $cookies.put("send_digits", myScope.send_digits);
                  $cookies.put("incompatible_browser_configuration", myScope.incompatible_browser_configuration);
                  $cookies.put("link_button_to_a_page_value", myScope.link_button_to_a_page_value);
                  $cookies.put("show_text_html_value", myScope.show_text_html_value);
                  $cookies.put("auth_uri", myScope.auth_uri);
          }


          $scope.widget_focus = function(form){
                   $("#valid-auth").hide();
                   $("#invalid-auth").hide();
          }

          $scope.test_web = function(form){

              if(!form.$valid) {
                   $("#valid-auth").hide();
                   $("#invalid-auth").hide();
                   myScope.auth_uri_valid = false;
                   return;
              }

              voxrtc_config = undefined;
              $.ajax({
                  url: myScope.auth_uri,
                  jsonp: "callback",
                  dataType: "jsonp",


              }).always(function() {
                                      if(typeof voxrtc_config != "undefined") {
                                        console.log("Valid Auth Service Detected"); // server response
                                        $("#valid-auth").show();
                                        $("#invalid-auth").hide();
                                        voxbone.WebRTC.init(voxrtc_config);
                                        myScope.auth_uri_valid = true;
                                        $scope.generateCode();
                                      }
                                      else {
                                        console.log("Invalid Auth Service"); // server response
                                        $("#valid-auth").hide();
                                        $("#invalid-auth").show();
                                        myScope.auth_uri_valid = false;
                                      }
                                  });
          }
          $scope.updateIncompatible = function() {
              if(myScope.incompatible_browser_configuration == 'show_text_html') {
                $('.widget-box').hide();
                $('#not-supported-message').removeClass('hidden');
                $('#launch_call').hide();
              } else if(myScope.incompatible_browser_configuration == 'hide_widget') {
                $('.widget-box').hide();
                $('#not-supported-message').addClass('hidden');
              } else {
                $('.widget-box').show();
                $('#launch_call').show();
                $('#not-supported-message').addClass('hidden');
              }
          }

          $scope.updateText = function() {
                $('#not-supported-message').html($scope.show_text_html_value);
          }

          $scope.generateCode = function() {
            $scope.saveConfig(); 
            getCode();
          }

          $scope.changePreviewMode = function(mode) {
               $scope.preview_webrtc_compatible = mode;
               if(mode) {
                      $('.widget-box').show();
                      $('#launch_call').show();
                      $('#not-supported-message').addClass('hidden');
                } else {
                    $scope.updateIncompatible();
                }
          }
          

    }]);

    function setCode(value) {
      $("#widget_code").text(value);
      $("#widget_code").html(PR.prettyPrintOne($("#widget_code").html()));

    }

    function prepareHtmlForCodepen() {
        console.log($("#widget_code").text());
        return $("#widget_code").text();//.replace(/"/g, "'");
    }

    function getCode() {
      var obj = { e164 : !{JSON.stringify(request.query.e164)},
                  login: !{JSON.stringify(request.query.login)},
                  password: !{JSON.stringify(request.query.password)},
                  buttonText: myScope.buttonText,
                  callerId: myScope.callerId,
                  buttonStyle: myScope.button_style,
                  sendDigits: myScope.send_digits,
                  dialPad: myScope.dial_pad,
                  context: myScope.context,
                  incompatibleBrowserConfiguration: myScope.incompatible_browser_configuration,
                  linkButtonToAPageValue: myScope.link_button_to_a_page_value,
                  showTextHtmlValue: myScope.show_text_html_value,
                  basic_auth: !{JSON.stringify(request.query.basic_auth)}
      };

      if (!{request.query.basic_auth} != 1) {
          if (!myScope.auth_uri_valid) {
              setCode("Please specify a valid Auth URL before generating code");
              return;
          }
          obj.authUrl = myScope.auth_uri;
      }

      var objStr = jQuery.param(obj);
      myScope.showWidgetCode = true;
      setCode('Generating code snippet...');

      $.ajax({
                type: "POST",
                url: "widget",
                data: JSON.stringify(obj),
                contentType: "application/json"
      }).done(setCode);
      console.log("http://www.voxbone.com/click2vox/widget?"+objStr);
    }

    //Copy to Clipboard
    var clipboard = new Clipboard('#clipboard_copy', {
                text: function(trigger) {
                    return $('#widget_code').text();
                }
            });
    clipboard.on('success', function(e) {
      console.info('Action:', e.action);
      console.info('Text:', e.text);
      console.info('Trigger:', e.trigger);
      e.clearSelection();
    });
    clipboard.on('error', function(e) {
      console.error('Action:', e.action);
      console.error('Trigger:', e.trigger);
    });
    clipboard.on('text', function(e) {
      console.error('Action:', e.action);
      console.error('Trigger:', e.trigger);
    });
    $(document).ready(function () {

      getCode();
      myScope.$apply();

      $('[data-toggle="tooltip"]').tooltip();

      $( ".title-toggle" ).click(function() {
        $( this ).parent().toggleClass( "active" );
      });

      $( ".btn-style-a" ).click(function() {
        $( ".widget-box" ).removeClass( "style-b" ).addClass( "style-a" );
        $( ".widget-footer-right" ).removeClass( "style-b" ).addClass( "style-a" );
      });
      $( ".btn-style-b" ).click(function() {
        $( ".widget-box" ).removeClass( "style-a" ).addClass( "style-b" );
        $( ".widget-footer-right" ).removeClass( "style-a" ).addClass( "style-b" );
      });

      $( ".togle-bg a.dark" ).click(function() {
        $( ".prev-view" ).removeClass("light").removeClass("grey").addClass( "dark" );
      });
      $( ".togle-bg a.grey" ).click(function() {
        $( ".prev-view" ).removeClass("light").removeClass("black").addClass( "grey" );
      });
      $( ".togle-bg a.light" ).click(function() {
        $( ".prev-view" ).removeClass("black").removeClass("grey").addClass( "light" );
      });

      $('.codebox-actions a').click(function(e) {
        e.preventDefault();
      });


      // if we've loaded the auth uri from cookies, test if it's valid
      if(!{request.query.basic_auth != 1} && myScope.auth_uri != "") {
              $('#auth_uri').trigger('blur');
      }


    });

  .main.createButton
    .header
      .container
        .row
          .col-xs-12
            h1 Create a WebRTC Call Button for #{request.query.e164}
            if request.query.basic_auth == 1
              p #[b Note:] this will create a code widget that can be embedded into any page that allows for JS code and will allow customers to call without installing any software.
            else
              p #[b Note:] web service needs to be installed to keep your password secret.  Install #[a(href="https://github.com/voxbone/webrtc-auth-servlet") webrtc-auth-servlet] or #[a(href="https://github.com/voxbone/webrtc-auth-perl") webrtc-auth-perl].
                |&nbsp;&nbsp;Alternatively enable basic authentication on this did in the customer portal and then return to this page to have a widget with your api key directly embedded into the generated html.

    .body(ng-controller="WidgetController")
      .container
        .row
          .col-md-6.left-col
            section
              span.title Button Configuration
              form
                .boxPanel
                  .form-group
                    label Button Label:
                    input.form-control(type="text", name="user", ng-model="buttonText" value="Call Sales" placeholder="i.e. Call Sales"  ng-change="generateCode()" ng-model-options="{ updateOn: 'blur' }")
                  .form-group
                    label Button Style:
                    button.btn-style-a(ng-click="button_style = 'style-a';generateCode()") #[span {{buttonText || 'Call Sales'}}]
                    button.btn-style-b(ng-click="button_style = 'style-b';generateCode()") #[span {{buttonText || 'Call Sales'}}]

            section
              span.title Call Configuration
              form#widget_form(name="widget_form", novalidate)
                .boxPanel
                  .panel.panel-default
                    if request.query.basic_auth != 1
                      .form-group
                        label.control-label Auth Server #[span.badge(data-toggle='tooltip' data-placement="right" title="The url to your authentication server, this sever must return javascript that assigns voxrtc_config.  Download one of the servers from the top of the page.") ?]
                        input.form-control(required id="auth_uri", name="auth_uri", ng-model="auth_uri",  ng-pattern="/^(http|https):.+$/", ng-blur="test_web(widget_form)", ng-focus="widget_focus(widget_form)", placeholder="i.e. https://tomcat.server/servlet/auth")
                        div(ng-show="widget_form.auth_uri.$touched")
                          div(style='color: red' ng-show="widget_form.auth_uri.$error.required") HTTP Auth URI is required
                          div(style='color: red' ng-show="widget_form.auth_uri.$error.pattern") HTTP Auth URI must be valid
                          div#valid-auth(style="color: green; display: none") Valid Auth Sever Detected
                          div#invalid-auth(style="color: red; display: none") Url not a valid Auth Sever
                    .panel-heading
                      a.title-toggle(data-toggle="collapse", data-target="#collapseCallConfiguration",href="#collapseCallConfiguration") Call Options
                    .panel-collapse.collapse#collapseCallConfiguration
                      .options-wrap.active
                        .form-group
                          label(for="btn-context") Caller ID #[span.badge(data-toggle='tooltip' data-placement="right" title="Enter the Caller ID that you would like sent with your Click2Vox widget calls") ?]
                          input.form-control(type="text", name="callerId", ng-model="callerId" value="click2vox" placeholder="i.e. click2vox" ng-change="generateCode()" ng-model-options="{ updateOn: 'blur' }")
                        .form-group
                          label(for="btn-context") Context  #[span.badge(data-toggle='tooltip' data-placement="right" title="Send custom data to your SIP server using the X-Voxbone-Context header. Make sure to configure your SIP server to process this header.") ?]
                          input.form-control(type="text", name="context", ng-model="context" ng-change="generateCode()" ng-model-options="{ updateOn: 'blur' }")
                        .form-group
                          label(for="btn-context")
                                input(type="checkbox" name="dial_pad" ng-model="dial_pad" ng-change="generateCode()")
                                span DTMF Dial Pad
                                span.badge(data-toggle='tooltip' data-placement="right" title="Display a dialpad to allow your users to enter DTMF digits during a call.") ?
                        .form-group
                          label(for="btn-context") Send Digits  #[span.badge(data-toggle='tooltip' data-placement="right" data-html="true" title="Automatically send DTMF digit(s) after a call is connected. This is useful for automatically navigating IVRs or entering access codes for a conference bridge. Digits should use the following format: <br><br>'1,2,3,1200ms,4,5,900ms,6,#'<br><br>This string will  generate 1 2 3, wait 1200 milliseconds, enter 4, 5, wait 900 milliseconds then enter 6, #") ?]
                          input.form-control(type="text", name="send_digits", ng-model="send_digits" ng-change="generateCode()" ng-model-options="{ updateOn: 'blur' }")
                  .panel.panel-default
                    .panel-heading
                      a.title-toggle(data-toggle="collapse",data-target="#collapseIncompatileBrowserConfiguration",href="#collapseIncompatileBrowserConfiguration") Incompatible Browser Configuration
                    .panel-collapse.collapse#collapseIncompatileBrowserConfiguration
                      .options-wrap.active
                        .form-group
                          label
                            input(type='radio' name='incompatible_browser_configuration' ng-model='incompatible_browser_configuration' value="hide_widget" ng-click="updateIncompatible()" ng-change="generateCode()")
                            span.radio-name Hide the widget
                            span.badge(data-toggle='tooltip' data-placement="right" title="If the visitor’s browser does not support WebRTC, hide the widget") ?
                        .form-group
                          label
                            input(type='radio' name='incompatible_browser_configuration' ng-model="incompatible_browser_configuration" value="link_button_to_a_page" ng-click="updateIncompatible()" ng-change="generateCode()")
                            span.radio-name Link button to a page
                            span.badge(data-toggle='tooltip' data-placement="right" title="If the visitor’s browser does not support WebRTC, specify a URL to go to when the button is clicked") ?
                            input.form-control(http-prefix type="url" name="link_button_to_a_page_value"
                            ng-model="link_button_to_a_page_value" ng-show="incompatible_browser_configuration == 'link_button_to_a_page'"  placeholder="i.e. https://mysite.com" ng-change="generateCode()" ng-model-options="{ updateOn: 'blur' }")
                        .form-group
                          label
                            input(type='radio' name='incompatible_browser_configuration' ng-model="incompatible_browser_configuration" value="show_text_html" ng-click="updateIncompatible()" ng-change="generateCode()")
                            span.radio-name Show Text/HTML
                            span.badge(data-toggle='tooltip' data-placement="right" title="If the visitor’s browser does not support WebRTC, specify a URL to go to when the button is clicked") ?
                            textarea.form-control(type="text" name="show_text_html_value", placeholder="Enter text or HTML" ng-show="incompatible_browser_configuration == 'show_text_html'" ng-model="show_text_html_value" ng-change="updateText();generateCode()" ng-model-options="{ updateOn: 'blur' }")

          .col-md-6.right-col
            .section
              div
                span.title Widget Preview in a Browser:
                ul.nav.nav-tabs
                     li(ng-click="changePreviewMode(true)" ng-class="{active:preview_webrtc_compatible}")
                       a(data-toggle="tab" href="#") WebRTC #[span.badge(data-toggle='tooltip' data-placement="right" data-html="true" data-width="350" title="This is how the widget will look like in a WebRTC compatible browser") ?]
                     li(ng-click="changePreviewMode(false)" ng-class="{active:!preview_webrtc_compatible}")
                       a(data-toggle="tab" href="#") Non-WebRTC #[span.badge(data-toggle='tooltip' data-placement="right" data-html="true" data-width="350" title="This is how the widget will look like in a WebRTC incompatible browser") ?]
                .boxPanel.preview
                    .prev-view.light
                      include widget.jade

                      .togle-bg
                        a.dark(href="javascript:void(0)")
                        a.grey(href="javascript:void(0)")
                        a.light(href="javascript:void(0)")

                      //- p#status_message Initializing configuration

                    .prev-code
                      .title
                        span Code Widget
                        p Paste the following HTML code into your website or give it a try using on

                      .widget-code-wrap
                        - var button_code = ""
                        .sample.shadow-z-2
                            pre.prettyprint.lang-html#widget_code
                              | #{button_code}
                        .codebox-actions(ng-show="showWidgetCode")
                          //a(href="#", onClick="getCode()") Generate Code
                          //.btn-jsfiddle(ng-show="showWidgetCode")
                          a(href="#" onclick="$('#code_debug_codepen #html').val('{\"html\": ' + JSON.stringify($('#widget_code').text()) + '}');$('#code_debug_codepen').submit();") CodePen
                          a(href="#" onclick="$('#code_debug_jsfiddle #html').val($('#widget_code').text());$('#code_debug_jsfiddle').submit();") JSFiddle
                          a(id="clipboard_copy" href="#") Copy to Clipboard
                          form#code_debug_codepen(action="https://codepen.io/pen/define" method="POST" target="_blank")
                                input#html(type="hidden" name="data" value!='{"html": prepareHtmlForCodepen()"}')
                          form#code_debug_jsfiddle(action="https://jsfiddle.net/api/post/library/pure/" method="POST" target="_blank")
                                input#html(type="hidden" name="html" value="")

